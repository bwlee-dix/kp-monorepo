/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[...404]': RouteRecordInfo<'/[...404]', '/:404(.*)', { 404: ParamValue<true> }, { 404: ParamValue<false> }>,
    '/app-list/': RouteRecordInfo<'/app-list/', '/app-list', Record<never, never>, Record<never, never>>,
    '/auth/': RouteRecordInfo<'/auth/', '/auth', Record<never, never>, Record<never, never>>,
    '/body': RouteRecordInfo<'/body', '/body', Record<never, never>, Record<never, never>>,
    '/body/api/': RouteRecordInfo<'/body/api/', '/body/api', Record<never, never>, Record<never, never>>,
    '/body/api/[apiId]/': RouteRecordInfo<'/body/api/[apiId]/', '/body/api/:apiId', { apiId: ParamValue<true> }, { apiId: ParamValue<false> }>,
    '/body/app/': RouteRecordInfo<'/body/app/', '/body/app', Record<never, never>, Record<never, never>>,
    '/body/app/[appName]/': RouteRecordInfo<'/body/app/[appName]/', '/body/app/:appName', { appName: ParamValue<true> }, { appName: ParamValue<false> }>,
    '/body/dashboard/': RouteRecordInfo<'/body/dashboard/', '/body/dashboard', Record<never, never>, Record<never, never>>,
    '/body/dashboard/index copy': RouteRecordInfo<'/body/dashboard/index copy', '/body/dashboard/index copy', Record<never, never>, Record<never, never>>,
    '/body/log/': RouteRecordInfo<'/body/log/', '/body/log', Record<never, never>, Record<never, never>>,
    '/body/user/': RouteRecordInfo<'/body/user/', '/body/user', Record<never, never>, Record<never, never>>,
    '/builder/': RouteRecordInfo<'/builder/', '/builder', Record<never, never>, Record<never, never>>,
    '/builder-landing': RouteRecordInfo<'/builder-landing', '/builder-landing', Record<never, never>, Record<never, never>>,
    '/create-wallet/': RouteRecordInfo<'/create-wallet/', '/create-wallet', Record<never, never>, Record<never, never>>,
    '/index copy': RouteRecordInfo<'/index copy', '/index copy', Record<never, never>, Record<never, never>>,
    '/mypage': RouteRecordInfo<'/mypage', '/mypage', Record<never, never>, Record<never, never>>,
    '/mypage/basic/': RouteRecordInfo<'/mypage/basic/', '/mypage/basic', Record<never, never>, Record<never, never>>,
    '/mypage/developer/': RouteRecordInfo<'/mypage/developer/', '/mypage/developer', Record<never, never>, Record<never, never>>,
    '/mypage/reward/': RouteRecordInfo<'/mypage/reward/', '/mypage/reward', Record<never, never>, Record<never, never>>,
    '/new-app': RouteRecordInfo<'/new-app', '/new-app', Record<never, never>, Record<never, never>>,
    '/new-app/': RouteRecordInfo<'/new-app/', '/new-app', Record<never, never>, Record<never, never>>,
    '/new-app/project-details': RouteRecordInfo<'/new-app/project-details', '/new-app/project-details', Record<never, never>, Record<never, never>>,
    '/new-app/project-files': RouteRecordInfo<'/new-app/project-files', '/new-app/project-files', Record<never, never>, Record<never, never>>,
    '/new-app/project-info': RouteRecordInfo<'/new-app/project-info', '/new-app/project-info', Record<never, never>, Record<never, never>>,
    '/new-app/project-review': RouteRecordInfo<'/new-app/project-review', '/new-app/project-review', Record<never, never>, Record<never, never>>,
    '/new-app/project-team': RouteRecordInfo<'/new-app/project-team', '/new-app/project-team', Record<never, never>, Record<never, never>>,
    '/new-app/project-tools': RouteRecordInfo<'/new-app/project-tools', '/new-app/project-tools', Record<never, never>, Record<never, never>>,
    '/new-app/success': RouteRecordInfo<'/new-app/success', '/new-app/success', Record<never, never>, Record<never, never>>,
    '/new-app-bak/wizard-v1': RouteRecordInfo<'/new-app-bak/wizard-v1', '/new-app-bak/wizard-v1', Record<never, never>, Record<never, never>>,
    '/new-app-bak/wizard-v1/': RouteRecordInfo<'/new-app-bak/wizard-v1/', '/new-app-bak/wizard-v1', Record<never, never>, Record<never, never>>,
    '/new-app-bak/wizard-v1/project-details': RouteRecordInfo<'/new-app-bak/wizard-v1/project-details', '/new-app-bak/wizard-v1/project-details', Record<never, never>, Record<never, never>>,
    '/new-app-bak/wizard-v1/project-files': RouteRecordInfo<'/new-app-bak/wizard-v1/project-files', '/new-app-bak/wizard-v1/project-files', Record<never, never>, Record<never, never>>,
    '/new-app-bak/wizard-v1/project-info': RouteRecordInfo<'/new-app-bak/wizard-v1/project-info', '/new-app-bak/wizard-v1/project-info', Record<never, never>, Record<never, never>>,
    '/new-app-bak/wizard-v1/project-review': RouteRecordInfo<'/new-app-bak/wizard-v1/project-review', '/new-app-bak/wizard-v1/project-review', Record<never, never>, Record<never, never>>,
    '/new-app-bak/wizard-v1/project-team': RouteRecordInfo<'/new-app-bak/wizard-v1/project-team', '/new-app-bak/wizard-v1/project-team', Record<never, never>, Record<never, never>>,
    '/new-app-bak/wizard-v1/project-tools': RouteRecordInfo<'/new-app-bak/wizard-v1/project-tools', '/new-app-bak/wizard-v1/project-tools', Record<never, never>, Record<never, never>>,
    '/new-app-bak/wizard-v1/success': RouteRecordInfo<'/new-app-bak/wizard-v1/success', '/new-app-bak/wizard-v1/success', Record<never, never>, Record<never, never>>,
    '/register/': RouteRecordInfo<'/register/', '/register', Record<never, never>, Record<never, never>>,
    '/sign-up/': RouteRecordInfo<'/sign-up/', '/sign-up', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
